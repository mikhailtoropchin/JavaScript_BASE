/*
 1. Написать функцию, преобразующую число в объект. Передавая на вход число от 0 до 999,
надо получить на выходе объект, в котором в соответствующих свойствах описаны единицы,
десятки и сотни. Например, для числа 245 надо получить следующий объект: {‘единицы’: 5,
‘десятки’: 4, ‘сотни’: 2}. Если число превышает 999, необходимо выдать соответствующее
сообщение с помощью console.log и вернуть пустой объект.
*/

function number_to_obj(num) {

    if (num > 999) {
        console.log("Число должно быть от 0 до 999.");
        return 
    }

    const result = {}

    result["единицы"] = num % 10
    num = (num - result["единицы"]) / 10
    result["десятки"] = num % 10
    num = (num - result["десятки"]) / 10
    result["сотни"] = num

    return result
    
}

console.log(number_to_obj(245));





/*
2. Продолжить работу с интернет-магазином:
a. В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими
объектами можно заменить их элементы?
b. Реализуйте такие объекты.
c. Перенести функционал подсчета корзины на объектно-ориентированную базу.
*/

// Решение с прошлого ДЗ
// товары:
let item_table = { price: 100 };
let item_bed = { price: 250 };
let item_sofa = { price: 130 };

//корзина:
let basket = [];

basket.push(item_bed);
basket.push(item_sofa);
basket.push(item_table);

//подсчет стоимости товаров в корзине
function countBasketPrice ( basket ) {
    let price = 0;
    for ( item in basket ) {
        price = price + basket[item].price;
    }
    return price;
}


let price = countBasketPrice(basket)

console.log(price);




/*
3. Подумать над глобальными сущностями. К примеру, сущность «Продукт» в
интернет-магазине актуальна не только для корзины, но и для каталога. Стремиться нужно к
тому, чтобы объект «Продукт» имел единую структуру для различных модулей сайта, но в
разных местах давал возможность вызывать разные методы.
*/

/* 
Если только подумать, то можно создать шаблон для подобных сущностей и от него наследоваться для конкретных случаев,
прописывая для них методы, необходимые для реализации функционала.
*/

